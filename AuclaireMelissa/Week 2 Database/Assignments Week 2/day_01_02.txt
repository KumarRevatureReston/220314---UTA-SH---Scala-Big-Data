B. MySQL Insert Rows into the Table

Write a SQL statement to insert a record with your own value into the table countries against each columns.

Here in the following is the structure of the table countries.

+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+	

use revature_demo;

INSERT INTO countries (
	COUNTRY_ID,
	COUNTRY_NAME,
	REGION_ID
) VALUES (
	'1',
	'United States',
	'1'
);



2. Write a SQL statement to insert one row into the table countries against the column country_id and country_name.

Here in the following is the structure of the table countries.

+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+	

use revature_demo;

INSERT INTO countries (
	COUNTRY_ID,
	COUNTRY_NAME
) VALUES (
	'2',
	'Egypt'
);




3. Write a SQL statement to create duplicate of countries table named country_new with all structure and data.

Here in the following is the structure of the table countries.

+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+	

use revature_demo;

CREATE TABLE countries_new AS
SELECT COUNTRY_ID, COUNTRY_NAME, REGION_ID
FROM countries;

SELECT * FROM countries_new;



4. Write a SQL statement to insert NULL values against region_id column for a row of countries table.


use revature_demo;

INSERT INTO countries (
	REGION_ID
) VALUES (
	NULL
);

SELECT * FROM countries;



5. Write a SQL statement to insert 3 rows by a single insert statement.

use revature_demo;

INSERT INTO countries (
	COUNTRY_ID,
	COUNTRY_NAME,
	REGION_ID
) VALUES 
('81', 'Japan','2'),
('82', 'South Korea','2'),
('86', 'China','2');

SELECT * FROM countries;



6. Write a SQL statement insert rows from country_new table to countries table.

Here is the rows for country_new table. Assume that, the countries table is empty.

+------------+--------------+-----------+
| COUNTRY_ID | COUNTRY_NAME | REGION_ID |
+------------+--------------+-----------+
| C0001      | India        |      1001 |
| C0002      | USA          |      1007 |
| C0003      | UK           |      1003 |
+------------+--------------+-----------+

use revature_demo;

CREATE TABLE countries_table
  AS (SELECT * FROM country_new);
  
  
 7. Write a SQL statement to insert one row in jobs table to ensure that no duplicate value will be entered in the job_id column.
 
CREATE TABLE IF NOT EXISTS countriis ( 
COUNTRY_ID integer NOT NULL UNIQUE , 
COUNTRY_NAME varchar(35) NOT NULL, 
REGION_ID decimal(6,0)
);

-- SELECT * FROM countriis;

INSERT INTO countriis VALUES(1, "America", 1);

SELECT * FROM countriis;

INSERT INTO countriis VALUES(1, "America", 1);
 
 


C.MySQL Update Table


1. Write a SQL statement to change the email column of employees table with 'not available' for all employees.

use classicmodels;

UPDATE employees SET  email = 'not avilable';

SELECT * FROM employees;



2. Write a SQL statement to change the email and commission_pct column of employees table with 'not available' and 0.10 for all employees.

use classicmodels;

UPDATE employees SET  email = 'not avilable', commission_pct = 'not_available';

SELECT * FROM employees;



3. Write a query to get discontinued Product list (Product ID and name). Go to the editor

use store;

SELECT product_id, name FROM products;



4. Write a query to get most expense and least expensive Product list (name and unit price). Go to the editor

use store;

SELECT name, unit_price FROM products ORDER BY unit_price DESC LIMIT 1;

SELECT name, unit_price FROM products ORDER BY unit_price ASC LIMIT 1;

SELECT oldest.unit_price, oldest.name, newest.unit_price, newest.name
FROM (SELECT name, unit_price FROM products ORDER BY unit_price DESC LIMIT 1) AS oldest, (SELECT name, unit_price FROM products ORDER BY unit_price ASC LIMIT 1) AS newest;



5. Write a query to get Product list (id, name, unit price) where current products cost less than $20. Go to the editor

use store;

SELECT product_id, name, unit_price FROM products WHERE unit_price < 20;



6. Write a query to get Product list (id, name, unit price) where products cost between $15 and $25. Go to the editor

use store;

SELECT product_id, name, unit_price FROM products WHERE unit_price >= 15 AND unit_price <= 25;



7. Write a query to get Product list (name, unit price) of above average price. Go to the editor

use store;

SELECT product_id, name, unit_price FROM products WHERE unit_price > (SELECT AVG(unit_price) FROM products);



8. Write a query to get Product list (name, unit price) of ten most expensive products. Go to the editor

use store;

SELECT product_id, name, unit_price 
FROM products AS a WHERE 10 > (SELECT COUNT(DISTINCT unit_price) FROM products AS b WHERE b.unit_price >= a.unit_price)
ORDER BY unit_price DESC;



9. Write a query to count current and discontinued products. Go to the editor

use store;

SELECT COUNT(name) AS p FROM products;



10. Write a query to get Product list (name, units on order , units in stock) of stock is less than the quantity on order. Go to the editor

use store;




