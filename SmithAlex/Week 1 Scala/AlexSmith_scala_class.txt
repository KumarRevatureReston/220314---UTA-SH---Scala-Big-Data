1)classes & Objects

class Ctr { // define class Ctr
  private var value = 6 // define public field value
  def incr() : Unit = {value +=1} // define method to increment value
  def curr() = value // define method to return current value of field value
}

val ctr1 = new Ctr // create instance of Ctr and assign to ctr1
new Ctr() // create instance of Ctr that is not retained
ctr1.incr() // call incr method on instance
print(ctr1.curr()) // print result of curr method on instance
----------------------------------
class Duck { // define class Duck
  var size = 1 // define public field size
}

var f = new Duck // instantiate Duck
f.size =10 // set value of field size on instance
println(f.size) // print current value of field size on instance

-----------------------------------

2)Structure of classes

 The auxiliary constructor in Scala is used for constructor overloading and defined as a method usingthis  name.
//define class employee with 3 private fields, empId, name, salary
class Employee(empId: Int,name: String,salary :Double){
  def this(empId:Int,name:String) // 2 arg aux constructor
  {
    this(0,"",0.0) // here it invokes primary constructor.
    println("Two-argument auxiliary constructor")
  }
  def this(empId:Int) // 1 arg aux constructor
  {
    this(0,"",0.0) // here it invokes primary constructor.
    println("One-argument auxiliary constructor")
  }
  def this() // 0 arg aux constructor
  {
    this(0) // here it invokes one-argument auxiliary constructor.
    println("Zero-argument auxiliary constructor")
  }
  println("Primary construtor")
}

val emp = new Employee() // instantiate employee with 0 arg aux constructor

In Scala, we can also create a primary constructor with a default value.
If you don’t provide value, then it will take the default value, 
which is provided in the primary constructor.  
Otherwise, the value we provide is from an instance created with 
the help of a parameter name of the class. Here is an example:

// define employee class with 3 private fields with default values
scala> class Employee(empId: Int = 0,name: String = "",salary :Double = 0.0){
 //constructor body
 println(s"empId = $empId , empName = $name , salary = $salary")
}

// since default values are provided you can call the constructor without supplying values
scala> val emp = new Employee()
empId = 0 , empName = , salary = 0.0

// since default values are provided you can call the constructor
// and supply values for the field(s) you specify
scala> val emp1 = new Employee(name = "Smith")
empId = 0 , empName = Smith , salary = 0.0

// since default values are provided you can call the constructor
// and supply values for the field(s) you specify
scala> val emp1 = new Employee(name = "Smith", empId = 9)
empId = 9 , empName = Smith , salary = 0.0

---------------------------------

3)Higher order functions

Higher order functions take other functions as parameters or return a function as a result
This is possible because functions are first-class values in Scala.

val salaries = Seq(20000, 70000, 40000) // create sequence of 3 ints
val doubleSalary = (x: Int) => x * 2 // define function that returns double the input
// create new sequence composed of the results of calling doubleSalary on each element of salaries
val newSalaries = salaries.map(doubleSalary)

val salaries = Seq(20000, 70000, 40000) // create sequence of 3 ints
// create new sequence composed of the results of performing
// the lambda expression on each element of salaries
val newSalaries = salaries.map(x => x * 2) // lambda expression performs doubling instead of named function
----------------------------------------------

4)functional programming

// this is already commented with a clear explanation so I'm skipping it

// three args are passed in:
// 1) 'f' - a function that takes an Int and returns an Int
// 2) 'a' - an Int
// 3) 'b' - an Int
def sum(f: Int => Int, a: Int, b: Int): Int = if (a > b) 0 else f(a) + sum(f, a + 1, b)

// these three functions use the sum() function
def sumInts(a: Int, b: Int): Int = sum(id, a, b)
def sumSquares(a: Int, b: Int): Int = sum(square, a, b)
def sumPowersOfTwo(a: Int, b: Int): Int = sum(powerOfTwo, a, b)

// three functions that are passed into the sum() function
def id(x: Int): Int = x
def square(x: Int): Int = x * x
def powerOfTwo(x: Int): Int = if (x == 0) 1 else 2 * powerOfTwo(x - 1)

// this simply prints the number 10
println("sum ints 1 to 4 = " + sumInts(1,4))

-------------------------------------------------
5)Inheritance

Multilevel Inheritance Example – 1

// basic inheritance

scala> class A{
| println("A")
| }
defined class A
scala> class B extends A{
| println("B")
| }
defined class B
scala> class C extends B{
| println("C")
| }
defined class C
scala> new C()
A
B
C
res1: C = C@347f8029


-------------------------
Example- Hierarchical Inheritance
scala> class A{
| println("A")
| }
defined class A
scala> class B extends A{
| println("B")
| }
defined class B
scala> class C extends A{
| println("C")
| }
defined class C
scala> new B()
A
B
res2: B = B@64c1a76e
scala> new C()
A
C
res3: C = C@193f5509
--------------------------------------------
object Multiple{
        def main(args: Array[String]):Unit={
           trait A{
                   var length:Int= _ // initialize var to default value for type int - 0
                   def action={ // define function
                     length=length+5 // do some work
                  }
             }
           trait B{
                   var height:Int = _ // initialize var to default value for type int - 0
                   def action={ // define function
                     height = height + 1 // do some work
                  }
             }
           class C extends A with B{ // class c extends a with b
                   length=3; // set default value for inherited field
                   height+=6; // set default value for inherited field
                   override def action={ 
                            super[A].action // override action to enable calling both 
                            super[B].action // parent class implementations of action
                   }
              }
                var c=new C // create new instance of C
                c.action // perform c's action function
                println(c.height) // 7
                println(c.length) // 8
             }
}


---------------------------------------------------
6)Singleton 
// https://docs.scala-lang.org/tour/singleton-objects.html
// read this for a better understanding of singletons
object Reservations { // object keyword means this is a singleton
  var lastNum = 0;
  val num2 = 2;
  // because this is a singleton, this method could be imported elsewhere in the application
  def newReservationNum() = { lastNum +=1; lastNum }
}
---------------------------------------------------

7)Exception handling
// Scala program of try-catch Exception
import java.io.IOException

// Creating object
object GFG
{
	// Main method
	def main(args:Array[String])
	{
		try // try block stops execution in the event of an exception
		{
			var N = 5/0 // attempt to divide by zero, because why not
			
		}
		catch // catch block catches exception and enables the application to handle it and continue
		{
			// Catch block contain cases.
			case i: IOException =>
			{
				println("IOException occurred.")
			}
			case a : ArithmeticException =>
			{
				println("Arithmetic Exception occurred.")
			}

		}

	}
}

// Scala program of finally Exception

// Creating object
object GFG
{
	// Main method
	def main(args: Array[String])
	{
		try // try block stops execution in the event of an exception
		{
			var N = 5/0 // attempt to divide by zero, because why not
		}
		catch // catch block catches exception and enables the application to handle it and continue
		{
			// Catch block contain case.
			case ex: ArithmeticException =>
			{
				println("Arithmetic Exception occurred.")
			}
		}
		finally // finally block always executes, regardless of whether an exception occured
		{
			// Finally block will execute
			println("This is final block.")
		}
	}
}




8)Error handling with Try

def failingFn(i: Int): Int = {
  val y: Int = throw new Exception("fail!")	// throws exception
  try {
    val x = 42 + 5
    x + y
  }
  // the catch block supplies a return value so that the
  // function can still return something in the event of an error
  catch { case e: Exception => 43 }	
}

def failingFn2(i: Int): Int = {
  try {
    val x = 42 + 5
    x + ((throw new Exception("fail!")): Int)	// throws exception
  }
  // the catch block supplies a return value so that the
  // function can still return something in the event of an error
  catch { case e: Exception => 43 }
}

// define a function accepting indexedseq of doubles
def mean_1(xs: IndexedSeq[Double], onEmpty: Double): Double =
  if (xs.isEmpty) onEmpty // return onEmpty if xs is empty
  else xs.sum / xs.length // otherwise return the average (sum divided by count)


9)Features

It has a sophisticated type inference system.
Its syntax is concise but still readable — we call it expressive.
It’s a pure object-oriented programming (OOP) language. Every variable is an object, and every “operator” is a method.
It’s also a functional programming (FP) language, so functions are also variables, and you can pass them into other functions. You can write your code using OOP, FP, or combine them in a hybrid style.
Scala source code compiles to “.class” files that run on the JVM.
Scala also works extremely well with the thousands of Java libraries that have been developed over the years.
A great thing about Scala is that you can be productive with it on Day 1, but it’s also a deep language, so as you go along you’ll keep learning, and finding newer, better ways to write code. Some people say that Scala will change the way you think about programming (and that’s a good thing).
A great Scala benefit is that it lets you write concise, readable code. The time a programmer spends reading code compared to the time spent writing code is said to be at least a 10:1 ratio, so writing code that’s concise and readable is a big deal. Because Scala has these attributes, programmers say that it’s expressive.
-------------------------------------------------------------------------------------------------
10)Currying in scala

// this is explained and commented thoroughly so I'm skipping it

Currying in Scala is simply a technique or a process of transforming a function. This function takes multiple arguments into a function that takes single argument. It is applied widely in multiple functional languages.
// Scala program add two numbers
// using Currying function
  
object Curry
{
    // transforming the function that 
    // takes two(multiple) arguments into 
    // a function that takes one(single) argument.
    def add2(a: Int) = (b: Int) => a + b;
  
    // Main method
    def main(args: Array[String])
    {
        println(add2(20)(19));
    }
}

----------------------------------------
11)Pattern Matching & Regular Expressions

def matchTest(x: Int): String = x match {
  case 1 => "one" // if x is 1, return "one"
  case 2 => "two" // if x is 2, return "two"
  case _ => "other" // if x is anything else, return "other"
}
matchTest(3)  // prints other
matchTest(1)  // prints "one"


// straight out of the documentation
// explanation found here https://docs.scala-lang.org/tour/regular-expression-patterns.html

import scala.util.matching.Regex

val numberPattern: Regex = "[0-9]".r // .r converts string to regular expression

numberPattern.findFirstMatchIn("awesomepassword") match {
  case Some(_) => println("Password OK")
  case None => println("Password must contain a number")
}

// straight out of the documentation
// explanation found here https://docs.scala-lang.org/tour/regular-expression-patterns.html

import scala.util.matching.Regex

val keyValPattern: Regex = "([0-9a-zA-Z- ]+): ([0-9a-zA-Z-#()/. ]+)".r

val input: String =
  """background-color: #A03300;
    |background-image: url(img/header100.png);
    |background-position: top center;
    |background-repeat: repeat-x;
    |background-size: 2160px 108px;
    |margin: 0;
    |height: 108px;
    |width: 100%;""".stripMargin

// string interpolation to output the matched groups
for (patternMatch <- keyValPattern.findAllMatchIn(input))
  println(s"key: ${patternMatch.group(1)} value: ${patternMatch.group(2)}") 
