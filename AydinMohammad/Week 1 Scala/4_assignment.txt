val num = Set(5,6,9,20,30,45)
 println( "Min element in Set(5,6,9,20,30,45) : " + num.min ) //Min element in Set(5,6,9,20,30,45) : 5

println( "Max element in Set(5,6,9,20,30,45) : " + num.max )//Max element in Set(5,6,9,20,30,45) : 45
//....................................................
val num1 = Set(5,6,9,20,30,45)
val num2 = Set(50,60,9,20,35,55)

println( "num1.&(num2) : " + num1.&(num2) )//num1.&(num2) : Set(20, 9)

println( "num1.intersect(num2) : " + num1.intersect(num2) )//num1.intersect(num2) : Set(20, 9)


//.....................................................

val colors1 = Map("red" -> "#FF0000", "azure" -> "#F0FFFF", "peru" -> "#CD853F")
      val colors2 = Map("blue" -> "#0033FF", "yellow" -> "#FFFF00", "red" -> "#FF0000")

      // use two or more Maps with ++ as operator
      var colors = colors1 ++ colors2
      println( "colors1 ++ colors2 : " + colors )

      // use two maps with ++ as method
      colors = colors1.++(colors2)
//colors1 ++ colors2 : Map(blue -> #0033FF, azure -> #F0FFFF,
// peru -> #CD853F, yellow -> #FFFF00, red -> #FF0000)


      println( "colors1.++(colors2)) : " + colors )
//colors1.++(colors2)) : Map(blue -> #0033FF, azure -> #F0FFFF,
// peru -> #CD853F, yellow -> #FFFF00, red -> #FF0000)

//..............................................................
/*
Key = red Value = #FF0000
Key = azure Value = #F0FFFF
Key = peru Value = #CD853F
*/
      val colors = Map("red" -> "#FF0000", "azure" -> "#F0FFFF","peru" -> "#CD853F")

      colors.keys.foreach{ i =>  
         print( "Key = " + i )
         println(" Value = " + colors(i) )}
//....................................................
     val colors = Map("red" -> "#FF0000", "azure" -> "#F0FFFF", "peru" -> "#CD853F")

      if( colors.contains( "red" )) {
         println("Red key exists with value :"  + colors("red"))//Red key exists with value :#FF0000

      } else {
           println("Red key does not exist")
      }
      
      if( colors.contains( "maroon" )) {
         println("Maroon key exists with value :"  + colors("maroon"))
      } else {
         println("Maroon key does not exist")//Maroon key does not exist

      }
//.....................................................
 val list = List(2, 3, 4)

		def f(x:Int) = List(x-1, x, x+1)

	
		val result = list.flatMap(y => f(y))

		println(result)//List(1, 2, 3, 2, 3, 4, 3, 4, 5)

