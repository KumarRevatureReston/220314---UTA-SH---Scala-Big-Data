//normal addition
10+2

//assigning "Hello world" to a val variable (val is immutable)
val msg = "Hello World"

//gives an error due to msg is a val so we cant change its value
msg="Hello!"

//assigning "Hello world" to a val variable (val is mutable)
var msg = "Hello World"

// msg value changed to "Hello" because its val
msg="Hello!"

// msg value changed to 3 because its val

msg = 3

//here we have an expresion that returns value to be assigned to //a variable
val x = {val a=10;val b=100; b-a}


val file = scala.io.Source.fromFile("kumar").mkString

val  m = { print ("foo "); 1}

// mutable variable
var x = 5

//the value of s will be 1 if x was greater than 0 and less than6 
//oterwise s will be 0.
val s = if (x> 0 && x<6) 1 else 0


//this code will print "This is if statement" because 
//the if condition has been satisfied while x is less than 20
Object Demo_1{
def main(args:Array[String]) {
var x=15;
if( x<20) {
println("This is if statement");
}
} }


//this code will print "positive" to the screen if x was greater
// than 0 and less than6 otherwise it will print "negative"

val t = if (x> 0 && x<6) "positive" else "negative"

//this code will print args value char by char to the screen
//arg here will carry the value of each char 
var args = "hello"
args.foreach(arg=>println(arg))

//same function as the previos example
args.foreach(println)

//list with three components 1,2,3
//1
//2
//3
//will be printed to the screen
val x = List(1,2,3)
x.foreach{println}


// for loop will keep printing i values in each itteration 
//1,2,3,4,5
for(i<-1 to 5)
println(i)


// this code will accumulatively add the sequance of the numbers   //of chars in (in) variable
//sum is the counter where we add (i)'s value every itteration
//result is 55
val in  = "hello world"
var sum = 0
for (i<-0 until in.length) sum+=i
print(sum)

//here we have two loops
//i will be increased once then j will itteratr 3 times
// 11 i=1  j=1
// 12 i=1  j=2
// 13 i=1  j=3
// 21 i=2  j=1
// 22 i=2  j=2
// 23 i=2  j=3
// 31 i=3  j=1
// 32 i=3  j=2
// 33 i=3  j=3
for(i<-1 to 3;j<-1 to 3)
println(10*i+j)

// this code will only print when i==l
// 11 i=1  j=1
// 22 i=2  j=2
// 33 i=3  j=3
 for(i<-1 to 3;j<-1 to 3 if i==j) println(10*i+j)

// 13 i=1 x=3 j=3
// 22 i=2 x=2 j=2
// 23 i=2 x=2 j=3
// 31 i=3 x=1 j=1
// 32 i=3 x=1 j=2
// 33 i=3 x=1 j=3
for(i<-1 to 3;x=4-i;j<- x to 3) println(10*i+j)

//i runs from 1 to 20, multiplied by 2.5 then assigned to x. 
val x = for(i<-1 to 20)yield i*2.5
for (i<-x) println(i)


// while loop will keep running until its condition been
// satisfied
//a value will start from 10 until 20
while loop
vim Demo_4.scala
Object Demo_4{
def main(args:Array[String]) {
var a=10;
while( a<20) {
println("value of a = " + a);
a= a+1;
}
} }



//do while loop will excute before check the condition
dowhile loop
var nodb = 2

do {
nodb +=1
println(s"nodb = $nodb")
}while(nodb < 10)



//simple function will print hello
def sayhello() {
println("Hello")
}


//function with two arguments returns the sum of them
// 7
def sum(a:Int,b:Int) {
println(a+b)
}

sum(2,5)


// function returns 7
def func():Int={
return 7
}

// function sum accepts Int and Any data type args
def sum(a:Int,b:Any):Any= {
println("hello")
}



// recursive function will keep calling itself and decrease its //argument untl the argument equal 0 then returns 1 
//calculating factorial for any given number
def factorial(n:Int):Int=if(n==0)1 else n*factorial(n-1)


//this function will recursivly multiply a's valu b times
//first call 15+functionExamp(15,1) will return 15
//second call 15+functionExamp(15,0) will return 0
//result = 15 + 15 + 0 = 30
Object Demo{
def main(args:Array[String]) = {
var result= functionExamp(15,2)
println(result)
}
def functionExamp(a:Int,b:Int):Int={
if(b == 0)
0
else
a+functionExamp(a,b-1)
} }


//calculates the area by multiplying length*breadth
def rect_area(length:Float,breadth:Float)
{ val area = length*breadth; print(area)}



var a = Array(1,2,3)
//this will give error because it exceeds the arrays borders
//this array only has three elements, indexing will be like: 
//0,1,2 
a(4)
//represent the first element in the array:1
a(0)

//empty array can take up to three elements
var a = new Array[Int](3)
//0
a(1)
//2
a(1)= 2
//[I@1d057a39 is the location of the first element of the array 
//in the memory
a

//define an arrray that can have up to 10 Int
val a = new Array[Int](10)
//define an arrray that can have up to 10 Strings
val s = new Array[String](10)
//define an arrray that can have two strings "Hello","world" 
val st = Array("Hello","world")


import scala.collection.mutable.ArrayBuffer
//ArrayBuffer is an alternative to array where size is flexible
val a = ArrayBuffer[Int]()
//adding one element to an ArrayBuffer 
a +=1
//adding multiple elements to an ArrayBuffer 
a +=(2,3,5)
//adding an array to an ArrayBuffer 
a ++=Array(6,7,8)


//different ways to instantiate a list
val list = 1 :: 2 :: 3 :: Nil
val list = List(1,2,3)
val x = List(1,2.0,33D,4000L)
val x = List.range(1,10)
val x = List.fill(3)("foo")
val x = List.tabulate(5)(n=>n*n)


//A ListBuffer is the mutable implementation of a list
import scala.collection.mutable.ListBuffer
var fruits = new ListBuffer[String]()
fruits += "Apple"
fruits += ("strawberry","kiwi")
fruits -= ("Apple","kiwi")
val fruitslists = fruits.toList


val x = List(3)
val y = 1 :: 2 :: x
val z = -1 :: y

val originalList1 = List(7,8,4,3,2)
val newList1 = originalList1.filter(_>3)

val p = List(111,200,321)
val q = List(4,-5,60)
val r =  p ++ q
val r = p ::: q
val r = List.concat(p,q)


val lst = List(1,2,3,4,5,6,7,8)
lst.head
lst.tail

def sum(l: List[Int]):Int = { if(l == Nil) 0 else l.head + sum(l.tail)}
val y = sum(lst)


//tuples are immutable, 

val a = (1,4, "Bob", "Jack")
//second element :4
a._2
a _2
//printing the tuples elements
val ab = (4,3,2,1)
ab.productIterator.foreach{ i => println("value ="+i)}
val t =("exam","test")
//using swap function t will be like (test,exam)
println(("swapped Tuple: " + t.swap)
val mn = (1,"wonderful",20.2356)
//convert all elements to string
println("concatenated String: " + mn.toString())




//set is a collection of pairwise different elements of the same //type
var s : Set[Int] = Set(1,3,5,7)
var s1 = Set(7,9,8,9)
var s2 = Set(10,11,12,13)
//the result will be both sets without dublication
//Set(10, 9, 13, 12, 7, 11, 8)
s1++s2
var x1 = Set(7,9,8,9)
var x2 = Set(10,11,12,13)
Set(10, 9, 13, 12, 7, 11, 8)
x1.++(x2)

var a1 = Set(11,44,33,22)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
var b1 = Set(77,99,22,88)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//the result will be the intersection between s1 and s2
//Set(22)
a1.&(b1)
//same here Set(22)
var a1 = Set(11,44,33,22)
var b1 = Set(77,99,22,88)
a1.intersect(b1)







val mapping = Map("Vishal"-> "Kumar","Vijay" -> "verma")
//printing all names in mapping
mapping.keys.foreach{i=>println(i+" "+mapping(i))}
//returns true because "vishal" is existed
mapping.contains("Vishal")





 Pure functions.

def sum(a: Int, b: Int) = a+b
}

Impure functions.

var myValue = 10
 def myImpureSum(a: Int, b: Int) = {
   myValue = 20
   println("Doing some sum work")
   a+b+myValue 
  }



val m1 = List(5, 12, 3, 13)
          
//after applying filter method
//List(5, 3)
//only displays elements that is less than 10
val result = m1.filter(_ < 10)
          




val m1 = Map(3 -> "geeks", 4 -> "for", 2 -> "cs")
          
// Applying transform method
val result = m1.transform((key,value) => value.toUpperCase)
          
// transform values to upper case
//Map(3 -> GEEKS, 4 -> FOR, 2 -> CS)
println(result)



//FlatMap is to remove the inner grouping of an item and //generate a sequence
val name = Seq("Nidhi", "Singh")
val result1 = name.map(_.toLowerCase)

val result2 = result1.flatten
List(n, i, d, h, i, s, i, n, g, h)

name.flatMap(_.toLowerCase)
List(n, i, d, h, i, s, i, n, g, h)



