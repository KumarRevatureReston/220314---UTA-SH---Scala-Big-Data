//create a class named Ctr
//value is private and cant be accessed from out the class
//thats why we need getter and setter functions
class Ctr {
private var value = 6
def incr() {value +=1}
def curr() = value
}

//new object 
val ctr1 = new Ctr // or
new Ctr()
//calling the setter function to increase value
ctr1.incr()
//calling curr() function and print the value
println(ctr1.curr())

//Duck class has no private attributes
class Duck {
var size = 1
}

var f = new Duck
f.size =10
//we were able to accesse size without getter and setter function
println(f.size) 

.............................................................


/*result will be:
Primary construtor
One-argument auxiliary constructor
Zero-argument auxiliary constructor
*/
class Employee(empId: Int,name: String,salary :Double){
 def this(empId:Int,name:String)
 {
 this(0,"",0.0) // primary constructor.
 println("Two-argument auxiliary constructor")
 }
 def this(empId:Int)//called by zero-arg constructor
 {
 this(0,"",0.0) // calls primary constructor.
 println("One-argument auxiliary constructor")
 }
 def this()//this will be invoked first
 {
 this(0) // calls one-argument auxiliary constructor.
 println("Zero-argument auxiliary constructor")
 }
 println("Primary construtor")
 }

val emp = new Employee()



class Employee(empId: Int = 0,name: String = "",salary :Double = 0.0){
 println(s"empId = $empId , empName = $name , salary = $salary")
}
// empId = 0 , empName =  , salary = 0.0
val emp = new Employee()

//empId = 0 , empName = Smith , salary = 0.0
val emp1 = new Employee(name = "Smith")

//empId = 9 , empName = Smith , salary = 0.0
val emp2 = new Employee(name = "Smith", empId = 9)
//..........................................................


val salaries = Seq(20000, 70000, 40000)
val doubleSalary = (x: Int) => x * 2
val newSalaries = salaries.map(doubleSalary)
 // List(40000, 140000, 80000)
println(newSalaries)

//......................................................


// three args are passed in:
// 1) 'f' - a function that takes an Int and returns an Int
// 2) 'a' - an Int
// 3) 'b' - an Int

//this function will recursivly calculate the sum between a,b
def sum(f: Int => Int, a: Int, b: Int): Int = if (a > b) 0 else f(a) + sum(f, a + 1, b)

// these three functions use the sum() function
def sumInts(a: Int, b: Int): Int = sum(id, a, b)
def sumSquares(a: Int, b: Int): Int = sum(square, a, b)
def sumPowersOfTwo(a: Int, b: Int): Int = sum(powerOfTwo, a, b)

// three functions that are passed into the sum() function
def id(x: Int): Int = x
def square(x: Int): Int = x * x
def powerOfTwo(x: Int): Int = if (x == 0) 1 else 2 * powerOfTwo(x - 1)

// sum ints 1 to 4 = 10
println("sum ints 1 to 4 = " + sumInts(1,4))
//sum squares 1 to 4 = 30
println("sum squares 1 to 4 = " + sumSquares(1,4))
//sum power of two from 1 to 4 = 30
println("sum power of two from 1 to 4 = " + sumPowersOfTwo(1,4))
//...............................................

 class A{
 println("A")
 }
 class B extends A{
 println("B")
 }

 class C extends B{
 println("C")
}
/*when creat an object of C all super classes will be inhereted
result will be:
A
B
C
*/

new C()

-------------------------
/* here we have both B and C inhereting A as an example on Hierarchical Inheritance. result:
A
B
A
C */
 class A{
 println("A")
 }
 class B extends A{
 println("B")
 }

 class C extends A{
 println("C")
}

new B()
new C()

//..................................................

/* class C extends A ans B.
result:
7
8
*/
object Multiple{
        def main(args: Array[String]):Unit={
           trait A{
                   var length:Int= _
                   def action={
                     length=length+5
                  }
             }
           trait B{
                   var height:Int = _
                   def action={
                     height = height + 1
                  }
             }
           class C extends A with B{
                   length=3;
                   height+=6;
                   override def action={
                            super[A].action
                            super[B].action
                   }
              }
                var c=new C
                c.action
                println(c.height)
                println(c.length)
             }
}


//......................................................
//A Singleton object is an object which defines a single object of a class

object Reservations {
 var lastNum = 0;
val num2 = 2;
def newReservationNum() = { lastNum +=1; lastNum }
}
//..............................................


//Arithmetic Exception occurred. divisio on zero
try
		{
			var N = 5/0
			
    }
		catch
		{
			// Catch block contain cases.
			case i: IOException =>
			{
				println("IOException occurred.")
			}
			case a : ArithmeticException =>
			{
				println("Arithmetic Exception occurred.")
			}

		}
// Scala program of finally Exception
		try
		{
			var N = 5/0
		}
		catch
		{
			// Catch block contain case.
			case ex: ArithmeticException =>
			{
				println("Arithmetic Exception occurred.")
			}
		}
		finally
		{
			// Finally block will execute
			println("This is final block.")
		}
	//................................................



def failingFn(i: Int): Int = {
  val y: Int = throw new Exception("fail!")	
  try {
    val x = 42 + 5
    x + y
  }
  catch { case e: Exception => 43 }	
}

def failingFn2(i: Int): Int = {
  try {
    val x = 42 + 5
    x + ((throw new Exception("fail!")): Int)	
  }
  catch { case e: Exception => 43 }
}

def mean_1(xs: IndexedSeq[Double], onEmpty: Double): Double =
  if (xs.isEmpty) onEmpty
  else xs.sum / xs.length


-------------------------------------------------------------------------------------------------
  
object Curry
{
    // transforming the function that 
    // takes two(multiple) arguments into 
    // a function that takes one(single) argument.
    def add2(a: Int) = (b: Int) => a + b;
  
    // Main method
    def main(args: Array[String])
    {
//result 39
        println(add2(20)(19));
    }
}

//.............................................

def matchTest(x: Int): String = x match {
  case 1 => "one"
  case 2 => "two"
  case _ => "other"
}
println(matchTest(3))  // prints other
println(matchTest(1)) // prints one 

import scala.util.matching.Regex

/*
Password must contain a number
key: background-color value: #A03300
key: background-image value: url(img/header100.png)
key: background-position value: top center
key: background-repeat value: repeat-x
key: background-size value: 2160px 108px
key: margin value: 0
key: height value: 108px
key: width value: 100
*/
val numberPattern: Regex = "[0-9]".r

numberPattern.findFirstMatchIn("awesomepassword") match {
  case Some(_) => println("Password OK")
  case None => println("Password must contain a number")
}


import scala.util.matching.Regex

val keyValPattern: Regex = "([0-9a-zA-Z- ]+): ([0-9a-zA-Z-#()/. ]+)".r

val input: String =
  """background-color: #A03300;
    |background-image: url(img/header100.png);
    |background-position: top center;
    |background-repeat: repeat-x;
    |background-size: 2160px 108px;
    |margin: 0;
    |height: 108px;
    |width: 100%;""".stripMargin

for (patternMatch <- keyValPattern.findAllMatchIn(input))
  println(s"key: ${patternMatch.group(1)} value: ${patternMatch.group(2)}")











