
-- 1. From the following table, write a SQL query to calculate total purchase 
-- amount of all orders. Return total purchase amount.   
SELECT SUM(purch_amt) AS Total_Purchase_Amount FROM orders;

-- 2. From the following table, write a SQL query to calculate average purchase 
-- amount of all orders. Return average purchase amount.   
SELECT AVG(purch_amt) AS Average_Purchase_Amount FROM orders;

-- 3. From the following table, write a SQL query to count the number of unique 
-- salespeople. Return number of salespeople.   
SELECT COUNT(DISTINCT(salesman_id)) AS Number_Of_Sales_People FROM orders;

-- 4. From the following table, write a SQL query to count the number of 
-- customers. Return number of customers.   
SELECT COUNT(DISTINCT(customer_id)) AS Number_of_Customers FROM customer;

-- 5. From the following table, write a SQL query to find the number of 
-- customers who got at least a gradation for his/her activity.  
SELECT COUNT(customer_id) AS Customers_With_Gradation FROM customer WHERE grade<>0;

-- 6. From the following table(orders), write a SQL query to find the maximum 
-- purchase amount.    
SELECT MAX(purch_amt) AS Max_Purchase_Amount FROM orders;

-- 7. From the following table(orders), write a SQL query to find the minimum purchase 
-- amount.
SELECT MIN(purch_amt) AS Min_Purchase_Amount FROM orders;

-- 8. From the following table(customer), write a SQL query to find the highest grade of 
-- the customers for each of the city. Return city, maximum grade.
SELECT city, MAX(grade) as max FROM customer GROUP BY city;

-- 9. From the following table(orders), write a SQL query to find the highest 
-- purchase amount ordered by each customer.
SELECT customer_id, MAX(purch_amt) FROM orders GROUP by customer_id;

-- 10. From the following table, write a SQL query to find the 
-- highest purchase amount ordered by each customer on a particular date. 
-- Return, order date and highest purchase amount.   
SELECT customer_id, ord_date, MAX(purch_amt) FROM orders GROUP by customer_id,ord_date;

-- 11. From the following table, write a SQL query to find the highest 
-- purchase amount on '2012-08-17' by each salesperson. Return salesperson 
-- ID, purchase amount.
SELECT customer_id, MAX(purch_amt) FROM orders WHERE ord_date="2012-08-17" GROUP by customer_id;

-- 12. From the following table(orders), write a SQL query to find highest order 
-- (purchase) amount by each customer in a particular order date. Filter 
-- the result by highest order (purchase) amount above 2000.00. Return 
-- customer id, order date and maximum purchase amount.
SELECT customer_id,ord_date,MAX(purch_amt) AS max FROM orders WHERE purch_amt>2000 GROUP BY ord_date;

-- 13. From the following table(orders), write a SQL query to find the maximum order 
-- (purchase) amount in the range 2000, 6000 (Begin and end values are included.) 
-- by combination of each customer and order date. Return customer id, order 
-- date and maximum purchase amount.
SELECT customer_id,ord_date,MAX(purch_amt) AS max FROM orders WHERE purch_amt>=2000 AND purch_amt<=6000 GROUP BY ord_date;

-- 14. From the following table, write a SQL query to find the maximum order 
-- (purchase) amount by the combination of each customer and order date. 
-- Filter the rows for maximum order (purchase) amount is either 
-- 2000, 3000, 5760, 6000. Return customer id, order date and maximum 
-- purchase amount.

SELECT customer_id,ord_date,MAX(purch_amt) AS max FROM orders WHERE purch_amt IN(2000, 3000, 5760, 6000) GROUP BY ord_date;

-- 15. From the following table(orders), write a SQL query to find the maximum order 
-- (purchase) amount by each customer. The customer ID should be in the 
-- range 3002 and 3007(Begin and end values are included.). Return customer
-- id and maximum purchase amount.
SELECT customer_id, MAX(purch_amt) FROM orders WHERE (customer_id>=3002 AND customer_id<=3007) GROUP BY customer_id;

-- 16. From the following table(orders), write a SQL query to find the maximum order  
-- (purchase) amount for each customer. The customer ID should be in the range
-- 3002 and 3007(Begin and end values are included.). Filter the rows for 
-- maximum order (purchase) amount is higher than 1000. Return customer id
-- and maximum purchase amount
SELECT customer_id, MAX(purch_amt) FROM orders WHERE (customer_id>=3002 AND customer_id<=3007) AND purch_amt>1000 GROUP BY customer_id;

-- 17. From the following table(orders), write a SQL query to find the maximum order 
-- (purchase) amount generated by each salesperson. Filter the rows for the 
-- salesperson ID is in the range 5003 and 5008 (Begin and end values are included.). Return salesperson id and maximum purchase amount.
SELECT salesman_id, MAX(purch_amt) FROM orders WHERE (salesman_id>=5003 AND salesman_id<=5008) GROUP BY salesman_id;

-- 18. From the following table(orders), write a SQL query to count all the orders 
-- generated on '2012-08-17'. Return number of orders.
SELECT COUNT(ord_no) FROM orders WHERE ord_date="2012-08-17";

-- 19. From the following table(orders), write a SQL query to count number of 
-- salespeople who belongs to a city. Return number of salespeople.
SELECT COUNT(salesman_id) FROM SALESMAN WHERE city IS NOT NULL;

-- 20. From the following table, write a SQL query to count number of orders
--  by the combination of each order date and salesperson. Return order date, 
-- salesperson id.  Go to the editor
SELECT ord_date,salesman_id,COUNT(*) AS count FROM orders GROUP BY ord_date,salesman_id;

-- 21. From the following table(item_mast), write a SQL query to calculate the average 
-- product price. Return average product price.
SELECT AVG(pro_price) AS "Average Price" FROM item_mast;

-- 22. From the following table(item_mast), write a SQL query to count number of  
-- products where product price is higher than or equal to 350. Return 
-- number of products.
SELECT COUNT(*) AS "Number of Products" FROM item_mast WHERE pro_price>=350;

-- 23. From the following table(item_mast), write a SQL query to compute the average 
-- price for unique companies. Return average price and company id.
SELECT AVG(pro_price) AS "Average Price",pro_com FROM item_mast GROUP BY pro_com;

-- 24. From the following table(mep_department), write a SQL query to compute the sum of 
-- the allotment amount of all departments. Return sum of the allotment amount.
SELECT SUM(dpt_allotment) AS sum FROM emp_department;

-- 25. From the following table(emp_details), write a SQL query to find the number of 
-- employees in each department. Return department code and number of employees.
SELECT emp_dept,COUNT(emp_idno) AS count FROM emp_details GROUP BY emp_dept;


